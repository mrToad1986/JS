'use strict'

//Homework 1

/*1. Задать температуру в градусах по Цельсию. 
Вывести в alert соответствующую температуру в градусах по Фаренгейту.
 Подсказка: расчёт идёт по формуле: Tf = (9 / 5) * Tc + 32, где Tf – температура по Фаренгейту,
Tc – температура по Цельсию*/
function convertCtoF(celsius) {
    var farenheit = (9 / 5) * celsius + 32;
    return farenheit;
}
console.log(convertCtoF(0))
console.log(convertCtoF(100));

//Если я правильно понял, простой альтернативы prompt() в node.js нет
//В браузере можно реализовать так, с вводом данных:
/*
<meta charset='utf-8'>
<script type='text/javascript'>
    function convertCtoF(celsius) {
        var farenheit = (9 / 5) * celsius + 32;
        return 'Температура в градусах Фаренгейта: ' + farenheit;
    }
    var c = prompt('Введите температуру в градусах Цельсия:');
    alert(convertCtoF(c))
</script>
*/

/*2. Объявить две переменные: admin и name. Записать в name строку "Василий"; Скопировать
значение из name в admin. Вывести admin (должно вывестись «Василий»)*/
var admin = '';
var name = '';
name = 'Василий'
admin = name;
console.log(admin);

/*3. Чему будет равно JS-выражение 1000 + "108"?*/
/*Выражение будет равно '1000108' так как первое значение будет приведено к типу str,
затем произойдет конкатенация двух значений, проверяем:*/
var a = 1000;
var b = '108';
var result = a + b;
console.log(result);

/*4. Самостоятельно разобраться с атрибутами тега script (async и defer)*/
/*
<script defer src="http://"></script>
Атрибут defer сообщает браузеру, что он должен продолжать обрабатывать страницу
и загружать скрипт в фоновом режиме, а затем запустить этот скрипт, когда он загрузится.
Т.е. содержимое страницы после скрипта будет обработано без ожидания загрузки скрипта.
Отложенные с помощью defer скрипты сохраняют порядок относительно друг друга, как и обычные скрипты.
Небольшие скрипты могут быть загружены первыми, но все равно будут выполненны согласно места
расположения в документе.

<script async src="http://"></script>
Атрибут async означает, что скрипт абсолютно независим.
Страница не ждёт асинхронных скриптов, содержимое обрабатывается и отображается.
Остальные скрипты не ждут async, и скрипты c async не ждут другие скрипты.
Несколько скриптов с async могут выполняться в любом порядке.
То, что первое загрузится – запустится в первую очередь:
*/
